At line no: 1: type_specifier : INT 

int

New ScopeTable with id 1.1 created

At line no: 3: type_specifier : INT 

int

At line no: 3 declaration_list : ID

i

At line no: 3: declaration_list : declaration_list COMMA ID

i,j

At line no: 3: declaration_list : declaration_list COMMA ID

i,j,k

At line no: 3 var_declaration : type_specifier declaration_list SEMICOLON

int i,j,k;

At line no: 3 statement : var_declaration

int i,j,k;

At line no: 3 statements : statement

int i,j,k;


Line 5: variable : ID
i

Line 5: factor : CONST_INT

3

Line 5: unary_expression :	factor

3

Line 5: term :	unary_expression

3

Line 5: simple_expression : term

3

Line 5: rel_expression	: simple_expression

3

Line 5: logic_expression : rel_expression

3

Line 5: expression : variable ASSIGNOP logic_expression

i = 3

Line 5: expression_statement : expression SEMICOLON

i1;

At line no: 5 statement : expression_statement

i1

At line no: 5 statements : statements statement

int i,j,k;
 i1


Line 6: variable : ID
j

Line 6: factor : CONST_INT

8

Line 6: unary_expression :	factor

8

Line 6: term :	unary_expression

8

Line 6: simple_expression : term

8

Line 6: rel_expression	: simple_expression

8

Line 6: logic_expression : rel_expression

8

Line 6: expression : variable ASSIGNOP logic_expression

j = 8

Line 6: expression_statement : expression SEMICOLON

j1;

At line no: 6 statement : expression_statement

j1

At line no: 6 statements : statements statement

int i,j,k;
i1
 j1


Line 7: variable : ID
k

Line 7: factor : CONST_INT

6

Line 7: unary_expression :	factor

6

Line 7: term :	unary_expression

6

Line 7: simple_expression : term

6

Line 7: rel_expression	: simple_expression

6

Line 7: logic_expression : rel_expression

6

Line 7: expression : variable ASSIGNOP logic_expression

k = 6

Line 7: expression_statement : expression SEMICOLON

k1;

At line no: 7 statement : expression_statement

k1

At line no: 7 statements : statements statement

int i,j,k;
i1
j1
 k1


Line 10: variable : ID
i

Line 10: factor : variable

i

Line 10: unary_expression :	factor

i

Line 10: term :	unary_expression

i

Line 10: simple_expression : term

i

Line 10: factor : CONST_INT

3

Line 10: unary_expression :	factor

3

Line 10: term :	unary_expression

3

Line 10: simple_expression : term

3

Line 10: rel_expression : simple_expression RELOP simple_expression

i==3

Line 10: logic_expression : rel_expression

T1

Line 10: expression : logic_expression

T1

Line 11: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(j);

At line no: 11 statements : statement

println

At line no: 12 compound_statement : LCURL statements RCURL

{
println
}

At line no: 12 statement : compound_statement

println

At line no: 14 statement : IF LPAREN expression RPAREN statement

if(T1)println

At line no: 14 statements : statements statement

int i,j,k;
i1
j1
k1
 T1

Line 14: variable : ID
j

Line 14: factor : variable

j

Line 14: unary_expression :	factor

j

Line 14: term :	unary_expression

j

Line 14: simple_expression : term

j

Line 14: factor : CONST_INT

8

Line 14: unary_expression :	factor

8

Line 14: term :	unary_expression

8

Line 14: simple_expression : term

8

Line 14: rel_expression : simple_expression RELOP simple_expression

j<8

Line 14: logic_expression : rel_expression

T2

Line 14: expression : logic_expression

T2

Line 15: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(i);

At line no: 15 statements : statement

println

At line no: 16 compound_statement : LCURL statements RCURL

{
println
}

At line no: 16 statement : compound_statement

println

Line 18: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(k);

At line no: 18 statements : statement

println

At line no: 19 compound_statement : LCURL statements RCURL

{
println
}

At line no: 19 statement : compound_statement

println

At line no: 19 statement : IF LPAREN expression RPAREN statement ELSE statement

if(T2)printlnelseprintln

At line no: 19 statements : statements statement

int i,j,k;
i1
j1
k1
T1 T2

Line 21: variable : ID
k

Line 21: factor : variable

k

Line 21: unary_expression :	factor

k

Line 21: term :	unary_expression

k

Line 21: simple_expression : term

k

Line 21: factor : CONST_INT

6

Line 21: unary_expression :	factor

6

Line 21: term :	unary_expression

6

Line 21: simple_expression : term

6

Line 21: rel_expression : simple_expression RELOP simple_expression

k!=6

Line 21: logic_expression : rel_expression

T3

Line 21: expression : logic_expression

T3

Line 22: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(k);

At line no: 22 statements : statement

println

At line no: 23 compound_statement : LCURL statements RCURL

{
println
}

At line no: 23 statement : compound_statement

println

Line 24: variable : ID
j

Line 24: factor : variable

j

Line 24: unary_expression :	factor

j

Line 24: term :	unary_expression

j

Line 24: simple_expression : term

j

Line 24: factor : CONST_INT

8

Line 24: unary_expression :	factor

8

Line 24: term :	unary_expression

8

Line 24: simple_expression : term

8

Line 24: rel_expression : simple_expression RELOP simple_expression

j>8

Line 24: logic_expression : rel_expression

T4

Line 24: expression : logic_expression

T4

Line 25: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(j);

At line no: 25 statements : statement

println

At line no: 26 compound_statement : LCURL statements RCURL

{
println
}

At line no: 26 statement : compound_statement

println

Line 27: variable : ID
i

Line 27: factor : variable

i

Line 27: unary_expression :	factor

i

Line 27: term :	unary_expression

i

Line 27: simple_expression : term

i

Line 27: factor : CONST_INT

5

Line 27: unary_expression :	factor

5

Line 27: term :	unary_expression

5

Line 27: simple_expression : term

5

Line 27: rel_expression : simple_expression RELOP simple_expression

i<5

Line 27: logic_expression : rel_expression

T5

Line 27: expression : logic_expression

T5

Line 28: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(i);

At line no: 28 statements : statement

println

At line no: 29 compound_statement : LCURL statements RCURL

{
println
}

At line no: 29 statement : compound_statement

println

Line 31: variable : ID
k

Line 31: factor : CONST_INT

0

Line 31: unary_expression :	factor

0

Line 31: term :	unary_expression

0

Line 31: simple_expression : term

0

Line 31: rel_expression	: simple_expression

0

Line 31: logic_expression : rel_expression

0

Line 31: expression : variable ASSIGNOP logic_expression

k = 0

Line 31: expression_statement : expression SEMICOLON

k1;

At line no: 31 statement : expression_statement

k1

At line no: 31 statements : statement

k1


Line 32: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(k);

At line no: 32 statements : statements statement

k1
 println

At line no: 33 compound_statement : LCURL statements RCURL

{
k1
println
}

At line no: 33 statement : compound_statement

k1
println

At line no: 33 statement : IF LPAREN expression RPAREN statement ELSE statement

if(T5)printlnelsek1
println

At line no: 33 statement : IF LPAREN expression RPAREN statement ELSE statement

if(T4)printlnelseT5

At line no: 33 statement : IF LPAREN expression RPAREN statement ELSE statement

if(T3)printlnelseT4

At line no: 33 statements : statements statement

int i,j,k;
i1
j1
k1
T1T2 T3

Line 36: factor : CONST_INT

0

Line 36: unary_expression :	factor

0

Line 36: term :	unary_expression

0

Line 36: simple_expression : term

0

Line 36: rel_expression	: simple_expression

0

Line 36: logic_expression : rel_expression

0

Line 36: expression : logic_expression

0

Line 36: statement : RETURN expression SEMICOLON

return 0;

At line no: 36 statements : statements statement

int i,j,k;
i1
j1
k1
T1T2T3 return

At line no: 37 compound_statement : LCURL statements RCURL

{
int i,j,k;
i1
j1
k1
T1T2T3return
}

ScopeTable # 1.1
15 --> < i : ID >
16 --> < j : ID >
17 --> < k : ID >

ScopeTable # 1
1 --> < main : ID >

ScopeTable with id 1.1 removed

Line 37: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main()int i,j,k;
i1
j1
k1
T1T2T3return

Line 37: unit : func_definition

int main()int i,j,k;
i1
j1
k1
T1T2T3return


Line 37: program : unit

int main()int i,j,k;
i1
j1
k1
T1T2T3return


		Symbol Table : 

ScopeTable # 1
1 --> < main : ID >

Total Lines : 38 

Total Errors : 0 

