At line no: 1: type_specifier : INT 

int

New ScopeTable with id 1.1 created

At line no: 2: type_specifier : INT 

int

At line no: 2 declaration_list : ID

a

At line no: 2: declaration_list : declaration_list COMMA ID

a,b

At line no: 2: declaration_list : declaration_list COMMA ID

a,b,c

At line no: 2: declaration_list : declaration_list COMMA ID

a,b,c,i

At line no: 2 var_declaration : type_specifier declaration_list SEMICOLON

int a,b,c,i;

At line no: 2 statement : var_declaration

int a,b,c,i;

At line no: 2 statements : statement

int a,b,c,i;


Line 3: variable : ID
b

Line 3: factor : CONST_INT

0

Line 3: unary_expression :	factor

0

Line 3: term :	unary_expression

0

Line 3: simple_expression : term

0

Line 3: rel_expression	: simple_expression

0

Line 3: logic_expression : rel_expression

0

Line 3: expression : variable ASSIGNOP logic_expression

b = 0

Line 3: expression_statement : expression SEMICOLON

b1;

At line no: 3 statement : expression_statement

b1

At line no: 3 statements : statements statement

int a,b,c,i;
 b1


Line 4: variable : ID
c

Line 4: factor : CONST_INT

1

Line 4: unary_expression :	factor

1

Line 4: term :	unary_expression

1

Line 4: simple_expression : term

1

Line 4: rel_expression	: simple_expression

1

Line 4: logic_expression : rel_expression

1

Line 4: expression : variable ASSIGNOP logic_expression

c = 1

Line 4: expression_statement : expression SEMICOLON

c1;

At line no: 4 statement : expression_statement

c1

At line no: 4 statements : statements statement

int a,b,c,i;
b1
 c1


Line 5: variable : ID
i

Line 5: factor : CONST_INT

0

Line 5: unary_expression :	factor

0

Line 5: term :	unary_expression

0

Line 5: simple_expression : term

0

Line 5: rel_expression	: simple_expression

0

Line 5: logic_expression : rel_expression

0

Line 5: expression : variable ASSIGNOP logic_expression

i = 0

Line 5: expression_statement : expression SEMICOLON

i1;

Line 5: variable : ID
i

Line 5: factor : variable

i

Line 5: unary_expression :	factor

i

Line 5: term :	unary_expression

i

Line 5: simple_expression : term

i

Line 5: factor : CONST_INT

4

Line 5: unary_expression :	factor

4

Line 5: term :	unary_expression

4

Line 5: simple_expression : term

4

Line 5: rel_expression : simple_expression RELOP simple_expression

i<4

Line 5: logic_expression : rel_expression

T1

Line 5: expression : logic_expression

T1

Line 5: expression_statement : expression SEMICOLON

T1;

Line 5: variable : ID
i

Line 5: unary_expression :	factor

i1

Line 5: term :	unary_expression

i1

Line 5: simple_expression : term

i1

Line 5: rel_expression	: simple_expression

i1

Line 5: logic_expression : rel_expression

i1

Line 5: expression : logic_expression

i1

Line 6: variable : ID
a

Line 6: factor : CONST_INT

3

Line 6: unary_expression :	factor

3

Line 6: term :	unary_expression

3

Line 6: simple_expression : term

3

Line 6: rel_expression	: simple_expression

3

Line 6: logic_expression : rel_expression

3

Line 6: expression : variable ASSIGNOP logic_expression

a = 3

Line 6: expression_statement : expression SEMICOLON

a1;

At line no: 6 statement : expression_statement

a1

At line no: 6 statements : statement

a1


Line 7: variable : ID
a

Line 7: unary_expression :	factor

T2

Line 7: term :	unary_expression

T2

Line 7: simple_expression : term

T2

Line 7: rel_expression	: simple_expression

T2

Line 7: logic_expression : rel_expression

T2

Line 7: expression : logic_expression

T2

Line 8: variable : ID
b

Line 8: unary_expression :	factor

b1

Line 8: term :	unary_expression

b1

Line 8: simple_expression : term

b1

Line 8: rel_expression	: simple_expression

b1

Line 8: logic_expression : rel_expression

b1

Line 8: expression : logic_expression

b1

Line 8: expression_statement : expression SEMICOLON

b1;

At line no: 8 statement : expression_statement

b1

At line no: 8 statements : statement

b1


At line no: 9 compound_statement : LCURL statements RCURL

{
b1

}

At line no: 9 statement : compound_statement

b1


At line no: 9 statement : WHILE LPAREN expression RPAREN statement

while(T2)b1


At line no: 9 statements : statements statement

a1
 while

At line no: 10 compound_statement : LCURL statements RCURL

{
a1
while
}

At line no: 10 statement : compound_statement

a1
while

line no. 10: statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement
for(i1T1i1)a1
while

At line no: 10 statements : statements statement

int a,b,c,i;
b1
c1
 i1

Line 11: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(a);

At line no: 11 statements : statements statement

int a,b,c,i;
b1
c1
i1 println

Line 12: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(b);

At line no: 12 statements : statements statement

int a,b,c,i;
b1
c1
i1println println

Line 13: statement : PRINTLN LPAREN ID RPAREN SEMICOLON

printf(c);

At line no: 13 statements : statements statement

int a,b,c,i;
b1
c1
i1printlnprintln println

At line no: 14 compound_statement : LCURL statements RCURL

{
int a,b,c,i;
b1
c1
i1printlnprintlnprintln
}

ScopeTable # 1.1
7 --> < a : ID >
8 --> < b : ID >
9 --> < c : ID >
15 --> < i : ID >

ScopeTable # 1
1 --> < main : ID >

ScopeTable with id 1.1 removed

Line 14: func_definition : type_specifier ID LPAREN RPAREN compound_statement

int main()int a,b,c,i;
b1
c1
i1printlnprintlnprintln

Line 14: unit : func_definition

int main()int a,b,c,i;
b1
c1
i1printlnprintlnprintln


Line 14: program : unit

int main()int a,b,c,i;
b1
c1
i1printlnprintlnprintln


		Symbol Table : 

ScopeTable # 1
1 --> < main : ID >

Total Lines : 15 

Total Errors : 0 

